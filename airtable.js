async function fetchFieldsFromTable(e,o){try{return(await base(e).select({fields:o}).all()).map(e=>{const r={};return o.forEach(o=>{r[o]=e.get(o)}),r})}catch(r){throw console.error("Error fetching data from Airtable:",r),r}}async function downloadAndSavePhoto(e){if(e&&e.length>0){const r=e[0],s=r.url,a=r.filename;try{const e=await axios({method:"GET",url:s,responseType:"stream"}),r=fs.createWriteStream(path.join(__dirname,a));return e.data.pipe(r),new Promise((e,o)=>{r.on("finish",e),r.on("error",o)})}catch(o){console.error("Error downloading photo:",o)}}}async function generateProfilesYaml(e){const o={groups:[{research_associates:{label:"Research Associates",summary:"Academics and professionals who are working or have worked on research projects or other initiatives of The Visible College.",members:[]}},{public_figures:{label:"Public Figures",summary:"Scholars working publicly in UAP Studies or adjacent fields who are not directly associated with The Visible College, but whose work we consider integral to an understanding of the subject area as a whole.",members:[]}}]};for(const r of e){if(r.Photo&&r.Photo.length>0){const e=path.join(__dirname,r.Photo[0].filename),o=path.join(__dirname,"assets","img",r.Photo[0].filename);try{await fsPromises.copyFile(e,o),await fsPromises.rm(e),console.log(`Moved photo: ${r.Photo[0].filename} from ${e} to ${o}`)}catch(s){console.error(`Error moving photo ${r.Photo[0].filename}:`,s)}}const e={name:r.Name,id:r.id,title:r["Website Title"],image:r.Photo?r.Photo[0].filename:""};if(r["Website Category"].toLowerCase().includes("research associate")){e.bio=`people/bio/${r.id}.md`,o.groups[0].research_associates.members.push(e);try{const e=path.join(__dirname,"_pages","people","bio",`${r.id}.md`);await fsPromises.writeFile(e,r["Research Bio"]||"","utf8"),console.log(`Created bio file for ${r.Name} at ${e}`)}catch(s){console.error(`Error writing bio file for ${r.Name}:`,s)}}else o.groups[1].public_figures.members.push(e)}o.groups.forEach(e=>{e[Object.keys(e)[0]].members.sort((e,o)=>e.name.localeCompare(o.name))});const r=yaml.dump(o,{lineWidth:-1});try{await fsPromises.writeFile(path.join(__dirname,"_data","profiles.yml"),r,"utf8"),console.log("Generated profiles.yml successfully")}catch(s){console.error("Error writing profiles.yml:",s)}}require("dotenv").config();const Airtable=require("airtable"),fs=require("fs"),fsPromises=require("fs").promises,axios=require("axios"),path=require("path"),yaml=require("js-yaml"),base=new Airtable({apiKey:process.env.AIRTABLE_API_KEY}).base(process.env.AIRTABLE_BASE_ID),tableId=process.env.AIRTABLE_TABLE_ID,fieldsToFetch=["Name","id","Website Category","Team?","Photo","Team Bio","Research Bio","Website Title"];fetchFieldsFromTable(tableId,fieldsToFetch).then(e=>(console.log(e),Promise.all(e.map(async e=>{e.Photo&&(await downloadAndSavePhoto(e.Photo),console.log(`Downloaded and saved: ${e.Photo[0].filename}`))})).then(()=>generateProfilesYaml(e)))).then(()=>{console.log("Process completed successfully")})["catch"](e=>{console.error("Failed to process data:",e)});